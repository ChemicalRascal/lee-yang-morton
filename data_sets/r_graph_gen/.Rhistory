sum_dif = 10
sum_dif
sum_diff = 10
n = 100
mean = 10/100
sum_diff = 10
m = 100
mean = sum_diff / n
sum_diff = 10
n = 100
mean = sum_diff / n
mean
p_0 = 0.9
p_1 = 0.1
p_neg1 = 0
var = p_0*(0-0.1)^2 + p_1*(1-0.1)^2 p_neg1*(-1-0.1)^2
variance = p_0*(0-0.1)^2 + p_1*(1-0.1)^2 + p_neg1*(-1-0.1)^2
sd = variance^(0.5)
sd
variance
p_0*(0-0.1)^2
p_1*(1-0.1)^2
#It was at this point that the author amended his earlier calculations, as he realized an error in his basic arithmetic
#He blamed an unfortunate lack of coffee.
p_hat = mean
p_hat
p_hat + 1.96*sqrt((p_hat*(1-p_hat))/n)
sqrt((p_hat*(1-p_hat))/n)
1.98*sqrt((p_hat*(1-p_hat))/n)
0.1+1.98*sqrt((p_hat*(1-p_hat))/n)
p_hat + 1.96*sqrt((p_hat*(1-p_hat))/n)
#It appeared that R, similarly, lacked coffee. However, the author was confident that the true answer was 0.1594, not 0.1588.
0.1-1.98*sqrt((p_hat*(1-p_hat))/n)
p_hat-1.98*sqrt((p_hat*(1-p_hat))/n)
#Well, at least R got that one right.
help rchisq
help("rchisq")
rchisq(100, 0.5)
rchisq(100, 2)
rchisq(100, 2)
vec = rchisq(100, 2)
vec
hist(vec)
qqnorm(vec)
p_hat + 1.96*sqrt((p_hat*(1-p_hat))/n)
p_hat - 1.96*sqrt((p_hat*(1-p_hat))/n)
l <- vector("list", 1000)
l
l <- vector("list", 1000)
i <- 1
while(i <= 1000) {}
while(i <= 1000) {
}
i <- 1
l <- vector("list", 1000)
while(i <= 1000){
l[[i]] <- mean(rchisq(5,2))
i += 1
l <- vector("list", 1000)
i <- 1
while(i <= 1000){
l[[i]] <- mean(rchisq(5,2))
i <- i + 1
}
l
hist(l)
hist(as.vector(l)
)
hist(as.vector(l))
hist(as.vector(l), "list")
as.vector(l)
vec = as.vector(l)
vec
hist(unlist(l))
help("hist")
hist(unlist(l), breaks=20)
plot(density((unlist(l)))
)
plot(density(unlist(l)))
plot(density(unlist(l)))
l <- vector("list", 1000)
i <- 1
while(i <= 1000){
l[[i]] <- mean(rchisq(5,2))
i <- i + 1
}
l <- vector("list", 1000)
i <- 1
while(i <= 1000){
}
l_1 <- vector("list", 1000)
l_5 <- vector("list", 1000)
l_10 <- vector("list", 1000)
l_20 <- vector("list", 1000)
l_40 <- vector("list", 1000)
l_80 <- vector("list", 1000)
i <- 1
while(i <= 1000){
l_1[[i]] <- mean(rchisq(1,2))
l_5[[i]] <- mean(rchisq(5,2))
l_10[[i]] <- mean(rchisq(10,2))
l_20[[i]] <- mean(rchisq(20,2))
l_40[[i]] <- mean(rchisq(40,2))
l_80[[i]] <- mean(rchisq(80,2))
i <- i + 1
}
plot(unlist(l_1))
plot(density(unlist(l_1)))
plot(density(unlist(l_5)))
plot(density(unlist(l_1)))
lines(density(unlist(l_5)))
help("plot")
plot(density(unlist(l_80)))
plot.new()
plot.window(ylim=range(density(unlist(l_80))))
plot.window(xlim=range(density(unlist(l_1))), ylim=range(density(unlist(l_80))))
range(density(unlist(l_1)))
range(unlist(l_1))
plot.window(xlim=range(unlist(l_1)), ylim=range(unlist(l_80)))
lines(density(unlist(l_1)))
axis(1); axis(2); box()
lines(density(unlist(l_1)))
plot.window(xlim=(0,5), ylim=(0,2))
plot.window(xlim=(0,5)0 ylim=(0,2))
plot.window(xlim=(0,5) ylim=(0,2))
plot.window(xlim=(0 5), ylim=(0 2))
plot.window(xlim=c(0 5), ylim=c(0 2))
plot.window(xlim=c(0, 5), ylim=c(0, 2))
lines(density(unlist(l_1)))
plot.new()
plot.window(xlim=c(0, 5), ylim=c(0, 2))
lines(density(unlist(l_1)))
axis(1); axis(2)
box()
lines(density(unlist(l_5)))
lines(density(unlist(l_10)))
lines(density(unlist(l_20)))
lines(density(unlist(l_40)))
lines(density(unlist(l_80)))
#Placebo
x = 30; n = 160
p_hat = x/n
p_hat + 1.96*sqrt((p_hat*(1-p_hat))/n)
p_hat - 1.96*sqrt((p_hat*(1-p_hat))/n)
#Nicotine patch
x = 52; n = 244
p_hat = x/n
p_hat + 1.96*sqrt((p_hat*(1-p_hat))/n)
p_hat - 1.96*sqrt((p_hat*(1-p_hat))/n)
#Zyban only
x = 85; n = 244
p_hat = x/n
p_hat + 1.96*sqrt((p_hat*(1-p_hat))/n)
p_hat - 1.96*sqrt((p_hat*(1-p_hat))/n)
#Zyban and nicotene patch
x = 95; n = 245
p_hat = x/n
p_hat + 1.96*sqrt((p_hat*(1-p_hat))/n)
p_hat - 1.96*sqrt((p_hat*(1-p_hat))/n)
prop.test(30, 160)
binom.test(30, 160)
x = 52; n = 244
prop.test(x, n)
binom.test(x, n)
x = 85; n = 244
prop.test(x, n)
binom.test(x, n)
x = 95; n = 245
prop.test(x, n)
binom.test(x, n)
95/245-85/244
95/245
85/244
p=95/245
p*(1-p)/245
p=85/244
p*(1-p)/244
0.000968984 + 0.0009303504
sqrt(0.000968984 + 0.0009303504)
0.03939445 - 1.96*0.04358135
0.03939445 + 1.96*0.04358135
52/244
30/160
52/244-30/160
0.2131148*(1-0.2131148)/244
0.1875*(1-0.1875)/160
sqrt(0.0006872823+0.0009521484)
0.02561475 + 1.96*0.04048988
0.02561475 - 1.96*0.04048988
p1 = 180/489
p2 = 82/404
p1-p2
p1*(1-p1)/489
p2*(1-p2)/404
sqrt(0.0004756685+0.0004004291)
d = sqrt(0.0004756685+0.0004004291)
p1-p2-(1.96*d)
p1-p2+(1.96*d)
options("repos")[[1]][1]
library(ggplot2)
options(repos="http://streaming.stat.iastate.edu/CRAN")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
library(scales)
library(ggplot2)
install.packages('ggplot2', dep = TRUE)
install.packages('ggplot2', dep = TRUE)
help("install.packages")
install.packages('scales', 'ggthemr', 'plyr', dep = TRUE)
install.packages(['scales', 'ggthemr', 'plyr'], dep = TRUE)
install.packages(('scales', 'ggthemr', 'plyr'), dep = TRUE)
install.packages('scales', dep = TRUE)
install.packages('ggthemr', dep = TRUE)
install.packages('ggthemr', dep = TRUE)
install.packages('devtools', dep = TRUE)
devtools::install_github('cttobin/ggthemr')
devtools::install_github('cttobin/ggthemr')
1 + 1 && 2 + 3
true
TRUE
TRUE && FALSE
install.packages('devtools', dep = TRUE) && install.packages('ggplot2', dep = TRUE) && install.packages('scales', dep = TRUE) && install.packages('plyr', dep = TRUE)
install.packages('ggplot2', dep = TRUE); install.packages('scales', dep = TRUE); install.packages('plyr', dep = TRUE)
devtools::install_github('cttobin/ggthemr')
library(ggplot2)
library(scales)
library(ggthemr)
library(plyr)
data <- read.csv(file="allCountries.5kr1.res.csv",sep=",")
pwd
pwd()
data <- read.csv(file="allCountries.5kr1.res.csv",sep=",")
setwd("C:/Users/jdenholm/Desktop/newgraphs")
data <- read.csv(file="allCountries.5kr1.res.csv",sep=",")
data
palette <- c('#ff0033', '#1e65aa', '#b1152a', '#5da13b', '#58df8c', '#7f763d','#e08114', '#022114', '#127999', '#f87197')
names(palette) <- levels(data$method)
palette <- c('#ff0033', '#1e65aa', '#b1152a', '#5da13b', '#58df8c', '#7f763d','#e08114', '#022114', '#127999', '#f87197', '#f87197', '#f87197')
names(palette) <- levels(data$method)
names
custom_theme <- define_palette(
swatch = c("#000000",palette),
gradient = c('#d0d0d0', '#000000'),
background = "#ffffff",
text = c('#000000', '#000000'),
line = c('#000000', '#000000'),
gridline = "#c3c3c3")
palette <- c('#ff0033', '#1e65aa', '#b1152a', '#5da13b', '#58df8c', '#7f763d','#e08114', '#022114', '#127999', '#f87197', '#f87198', '#f87199')
names(palette) <- levels(data$method)
custom_theme <- define_palette(
swatch = c("#000000",palette),
gradient = c('#d0d0d0', '#000000'),
background = "#ffffff",
text = c('#000000', '#000000'),
line = c('#000000', '#000000'),
gridline = "#c3c3c3")
ggthemr(custom_theme,layout = "scientific",type = "inner",spacing = 0.5,text_size = 8, line_weight = 0.2)
help("aes")
p <- ggplot(data)#,aes(x=space_usage,y=time_per_posting,shape=method,fill=method,color=method))
print(p)
p <- p + geom_point(size=3)
p <- p + scale_y_continuous(name="Time per Posting [ns]")
#p <- p + scale_x_continuous(trans="log2",name="Bits per Posting",breaks=c(2,4,5,6,8,10,12,16,32,64))
p <- p + scale_x_continuous(name="Bits per Posting",breaks=c(2,4,5,6,8,10,12,16,32,64))
p <- p + scale_shape_manual(values=c(15,16,17,23,25,3,7,8,9,10,11,12,13))
p <- p + scale_fill_manual(values=palette)
p <- p + scale_color_manual(values=palette)
p <- p + theme(plot.margin = unit(c(1,0,1,0), "mm"))
p <- p + theme(legend.position = c(0.79,0.76))
p <- p + theme(legend.title = element_blank())
p <- p + theme(legend.margin = margin(t = -2, r = 2, b = 2, l = 2, unit = "pt"))
p <- p + theme(legend.background = element_rect(color="black",linetype="dotted"))
p <- p + theme(legend.key.size = unit(0.4, "cm"))
p <- p + theme(axis.text.x= element_text(face="plain",size=7))
p <- p + theme(axis.text.y= element_text(face="plain",size=7))
p <- p + theme(axis.title.x= element_text(face="plain",size=8))
p <- p + theme(axis.title.y= element_text(face="plain",size=8))
#p <- p + theme(legend.key = element_rect(size = 1, color = 'white'))
p <- p + guides(fill=guide_legend(ncol=2),shape=guide_legend(ncol=2))
p <- p + annotation_logticks(base=2,"b");
figWidth=4.25
figHeight=2.50
pdf(file="./time-space.pdf",width=figWidth,height=figHeight)
print(p)
dev.off()
data
data[1]
data$method
data$sdsl_k2
ggthemr(custom_theme,layout = "scientific",type = "inner",spacing = 0.5,text_size = 8, line_weight = 0.2)
p <- ggplot(data,x=size,y=)#,aes(x=space_usage,y=time_per_posting,shape=method,fill=method,color=method))
p <- p + geom_point(size=3)
p <- p + scale_y_continuous(name="Time per Posting [ns]")
#p <- p + scale_x_continuous(trans="log2",name="Bits per Posting",breaks=c(2,4,5,6,8,10,12,16,32,64))
p <- p + scale_x_continuous(name="Bits per Posting",breaks=c(2,4,5,6,8,10,12,16,32,64))
p <- p + scale_shape_manual(values=c(15,16,17,23,25,3,7,8,9,10,11,12,13))
p <- p + scale_fill_manual(values=palette)
p <- p + scale_color_manual(values=palette)
p <- p + theme(plot.margin = unit(c(1,0,1,0), "mm"))
p <- p + theme(legend.position = c(0.79,0.76))
p <- p + theme(legend.title = element_blank())
p <- p + theme(legend.margin = margin(t = -2, r = 2, b = 2, l = 2, unit = "pt"))
p <- p + theme(legend.background = element_rect(color="black",linetype="dotted"))
p <- p + theme(legend.key.size = unit(0.4, "cm"))
p <- p + theme(axis.text.x= element_text(face="plain",size=7))
p <- p + theme(axis.text.y= element_text(face="plain",size=7))
p <- p + theme(axis.title.x= element_text(face="plain",size=8))
p <- p + theme(axis.title.y= element_text(face="plain",size=8))
#p <- p + theme(legend.key = element_rect(size = 1, color = 'white'))
p <- p + guides(fill=guide_legend(ncol=2),shape=guide_legend(ncol=2))
p <- p + annotation_logticks(base=2,"b");
figWidth=4.25
figHeight=2.50
pdf(file="./time-space.pdf",width=figWidth,height=figHeight)
print(p)
data
data$X0.01
p <- ggplot(data,x=size,y=X0.01)#,aes(x=space_usage,y=time_per_posting,shape=method,fill=method,color=method))
p <- p + geom_point(size=3)
p <- p + scale_y_continuous(name="Time per Posting [ns]")
#p <- p + scale_x_continuous(trans="log2",name="Bits per Posting",breaks=c(2,4,5,6,8,10,12,16,32,64))
p <- p + scale_x_continuous(name="Bits per Posting",breaks=c(2,4,5,6,8,10,12,16,32,64))
p <- p + scale_shape_manual(values=c(15,16,17,23,25,3,7,8,9,10,11,12,13))
p <- p + scale_fill_manual(values=palette)
p <- p + scale_color_manual(values=palette)
p <- p + theme(plot.margin = unit(c(1,0,1,0), "mm"))
p <- p + theme(legend.position = c(0.79,0.76))
p <- p + theme(legend.title = element_blank())
p <- p + theme(legend.margin = margin(t = -2, r = 2, b = 2, l = 2, unit = "pt"))
p <- p + theme(legend.background = element_rect(color="black",linetype="dotted"))
p <- p + theme(legend.key.size = unit(0.4, "cm"))
p <- p + theme(axis.text.x= element_text(face="plain",size=7))
p <- p + theme(axis.text.y= element_text(face="plain",size=7))
p <- p + theme(axis.title.x= element_text(face="plain",size=8))
p <- p + theme(axis.title.y= element_text(face="plain",size=8))
#p <- p + theme(legend.key = element_rect(size = 1, color = 'white'))
p <- p + guides(fill=guide_legend(ncol=2),shape=guide_legend(ncol=2))
p <- p + annotation_logticks(base=2,"b");
figWidth=4.25
figHeight=2.50
pdf(file="./time-space.pdf",width=figWidth,height=figHeight)
print(p)
dev.off()
p <- ggplot(data,aes(x=size,y=X0.01))#,aes(x=space_usage,y=time_per_posting,shape=method,fill=method,color=method))
p <- p + geom_point(size=3)
p <- p + scale_y_continuous(name="Time per Posting [ns]")
#p <- p + scale_x_continuous(trans="log2",name="Bits per Posting",breaks=c(2,4,5,6,8,10,12,16,32,64))
p <- p + scale_x_continuous(name="Bits per Posting",breaks=c(2,4,5,6,8,10,12,16,32,64))
p <- p + scale_shape_manual(values=c(15,16,17,23,25,3,7,8,9,10,11,12,13))
p <- p + scale_fill_manual(values=palette)
p <- p + scale_color_manual(values=palette)
p <- p + theme(plot.margin = unit(c(1,0,1,0), "mm"))
p <- p + theme(legend.position = c(0.79,0.76))
p <- p + theme(legend.title = element_blank())
p <- p + theme(legend.margin = margin(t = -2, r = 2, b = 2, l = 2, unit = "pt"))
p <- p + theme(legend.background = element_rect(color="black",linetype="dotted"))
p <- p + theme(legend.key.size = unit(0.4, "cm"))
p <- p + theme(axis.text.x= element_text(face="plain",size=7))
p <- p + theme(axis.text.y= element_text(face="plain",size=7))
p <- p + theme(axis.title.x= element_text(face="plain",size=8))
p <- p + theme(axis.title.y= element_text(face="plain",size=8))
#p <- p + theme(legend.key = element_rect(size = 1, color = 'white'))
p <- p + guides(fill=guide_legend(ncol=2),shape=guide_legend(ncol=2))
p <- p + annotation_logticks(base=2,"b");
figWidth=4.25
figHeight=2.50
pdf(file="./time-space.pdf",width=figWidth,height=figHeight)
print(p)
dev.off()
library(ggplot2)
